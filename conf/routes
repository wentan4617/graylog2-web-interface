# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Authentication
GET           /login                                                                             @controllers.SessionsController.index(destination: String ?= "")
POST          /login                                                                             @controllers.SessionsController.create()
GET           /logout                                                                            @controllers.SessionsController.destroy()

# Unconnected web interface
GET           /disconnected                                                                      @controllers.LonesomeInterfaceController.index()

# Home page
GET           /                                                                                  @controllers.SearchController.globalSearch()

# Redirect for personal startpage.
GET           /startpage                                                                         @controllers.StartpageController.redirect()

# Search
GET           /search                                                                            @controllers.SearchController.index(q ?= "", rangetype ?= "relative", relative:Integer ?= 300, from ?= "", to ?= "", keyword ?= "", interval ?= "", page:Integer ?= 1, saved:String ?= "", sortField:String ?= "", sortOrder:String ?= "", fields:String ?= "", width:Integer ?= -1)
GET           /search/csv                                                                        @controllers.SearchController.exportAsCsv(q ?= "", filter ?= "", rangetype ?= "", relative:Integer ?= -1, from ?= "", to ?= "", keyword ?= "", fields:String ?= "")

# Messages
GET           /messages/:index/:id                                                               @controllers.SearchController.showMessage(index: String, id: String)

# Streams
GET           /streams                                                                           @controllers.StreamsController.index()
GET           /streams/:stream_id/messages                                                       @controllers.StreamSearchController.index(stream_id: String, q ?= "", rangetype ?= "", relative:Integer ?= -1, from ?= "", to ?= "", keyword ?= "", interval ?= "", page:Integer ?= 1, saved:String ?= "", sortField:String ?= "", sortOrder:String ?= "", fields: String ?= "", width:Integer ?= -1)
GET           /streams/:stream_id/rules                                                          @controllers.StreamRulesController.index(stream_id: String)
GET           /streams/:stream_id/csv                                                            @controllers.StreamSearchController.exportAsCsv(stream_id: String, q ?= "", rangetype ?= "", relative:Int ?= -1, from ?= "", to ?= "", keyword ?= "", fields:String ?="")

# Stream Outputs
GET           /streams/:stream_id/outputs                                                        @controllers.StreamOutputsController.index(stream_id: String)

# Alerts
GET           /streams/:stream_id/alerts                                                         @controllers.AlertsController.index(stream_id: String)
POST          /streams/:stream_id/alerts/conditions/add/messagecount                             @controllers.AlertsController.addTypeMessageCount(stream_id: String)
POST          /streams/:stream_id/alerts/conditions/add/fieldvalue                               @controllers.AlertsController.addTypeFieldValue(stream_id: String)
POST          /streams/:stream_id/alerts/conditions/add/fieldcontentvalue                        @controllers.AlertsController.addTypeFieldContentValue(stream_id: String)
POST          /streams/:stream_id/alerts/conditions/:condition_id                                @controllers.AlertsController.updateCondition(stream_id: String, condition_id: String)
GET           /streams/:stream_id/alerts/conditions/:condition_id/delete                         @controllers.AlertsController.removeCondition(stream_id: String, condition_id: String)
POST          /streams/:stream_id/alerts/receivers/user/add                                      @controllers.AlertsController.addReceiverUser(stream_id: String)
POST          /streams/:stream_id/alerts/receivers/email/add                                     @controllers.AlertsController.addReceiverEmail(stream_id: String)
GET           /streams/:stream_id/alerts/receivers/user/delete                                   @controllers.AlertsController.removeReceiverUser(stream_id: String, username: String)
GET           /streams/:stream_id/alerts/receivers/email/delete                                  @controllers.AlertsController.removeReceiverEmail(stream_id: String, email: String)
POST          /streams/:stream_id/alerts/sendDummyAlert                                          @controllers.AlertsController.sendDummyAlert(stream_id: String)

# System
GET           /system                                                                            @controllers.SystemController.index(page:Integer ?= 1)
GET           /system/nodes                                                                      @controllers.NodesController.nodes()
GET           /system/nodes/:node_id                                                             @controllers.NodesController.node(node_id: String)
GET           /system/radios/:radio_id                                                           @controllers.RadiosController.show(radio_id: String)
GET           /system/threaddump/:node_id                                                        @controllers.NodesController.threadDump(node_id: String)
GET           /system/threaddump/radio/:radio_id                                                 @controllers.RadiosController.threadDump(radio_id: String)
GET           /system/inputs                                                                     @controllers.InputsController.index()
POST          /system/inputs                                                                     @controllers.InputsController.launch()
GET           /system/inputs/:node_id                                                            @controllers.InputsController.manage(node_id: String)
GET           /system/inputs/radio/:radio_id                                                     @controllers.InputsController.manageRadio(radio_id: String)
POST          /system/inputs/:node_id/:input_id/terminate                                        @controllers.InputsController.terminate(node_id: String, input_id: String)
GET           /system/inputs/:node_id/:input_id/terminate                                        @controllers.InputsController.terminate(node_id: String, input_id: String)
POST          /system/inputs/:input_id/update                                                    @controllers.InputsController.update(input_id: String)
POST          /system/inputs/:input_id/terminate                                                 @controllers.InputsController.terminateGlobal(input_id: String)
GET           /system/inputs/:input_id/terminate                                                 @controllers.InputsController.terminateGlobal(input_id: String)
POST          /system/inputs/:node_id/:input_id/staticfields                                     @controllers.InputsController.addStaticField(node_id: String, input_id: String)
POST          /system/inputs/:input_id/staticfields                                              @controllers.InputsController.addStaticFieldGlobal(input_id: String)
GET           /system/inputs/:node_id/:input_id/staticfields/:key/delete                         @controllers.InputsController.removeStaticField(node_id: String, input_id: String, key: String)
POST          /system/inputs/:input_id/start                                                     @controllers.InputsController.start(input_id: String)
POST          /system/inputs/:input_id/stop                                                      @controllers.InputsController.stop(input_id: String)
POST          /system/inputs/:input_id/restart                                                   @controllers.InputsController.restart(input_id: String)
GET           /system/inputs/:input_id/start                                                     @controllers.InputsController.start(input_id: String)
GET           /system/inputs/:input_id/stop                                                      @controllers.InputsController.stop(input_id: String)
GET           /system/inputs/:input_id/restart                                                   @controllers.InputsController.restart(input_id: String)
GET           /system/contentpacks                                                               @controllers.BundlesController.index()
GET           /system/contentpacks/export                                                        @controllers.BundlesController.exportForm()
POST          /system/contentpacks/export                                                        @controllers.BundlesController.export()
GET           /system/grokpatterns                                                               @controllers.GrokPatternsController.index()
POST          /system/grokpatterns/import                                                        @controllers.GrokPatternsController.upload()
GET           /system/collectors                                                                 @controllers.CollectorsController.index()

# Outputs
GET           /system/outputs                                                                    @controllers.OutputsController.index()

GET           /system/metrics/node/:node_id                                                      @controllers.MetricsController.ofNode(node_id: String, prefilter ?= "")
GET           /system/metrics/master                                                             @controllers.MetricsController.ofMasterNode(prefilter ?= "")
GET           /system/metrics/radio/:radio_id                                                    @controllers.MetricsController.ofRadio(radio_id: String, prefilter ?= "")
GET           /system/indices                                                                    @controllers.IndicesController.index()
GET           /system/indices/ranges/rebuild                                                     @controllers.IndicesController.reCalculateRanges()
GET           /system/deflector/cycle                                                            @controllers.IndicesController.cycleDeflector()
POST          /system/nodes/:node_id/processing/pause                                            @controllers.NodesController.pauseMessageProcessing(node_id: String)
POST          /system/nodes/:node_id/processing/resume                                           @controllers.NodesController.resumeMessageProcessing(node_id: String)
GET           /system/indices/:index/close                                                       @controllers.IndicesController.closeIndex(index: String)
GET           /system/indices/:index/reopen                                                      @controllers.IndicesController.reopenIndex(index: String)
GET           /system/indices/:index/delete                                                      @controllers.IndicesController.deleteIndex(index: String)
GET           /system/indices/failures                                                           @controllers.IndicesController.failures(page:Integer ?= 1)
GET           /system/nodes/:node_id/lb/override/:status                                         @controllers.NodesController.overrideLbStatus(node_id: String, status: String)
GET           /system/radios/:radio_id/lb/override/:status                                       @controllers.RadiosController.overrideLbStatus(radio_id: String, status: String)
GET           /system/nodes/:node_id/shutdown                                                    @controllers.NodesController.shutdown(node_id: String)

# Saved searches
GET           /savedsearches                                                                     @controllers.api.SavedSearchesApiController.list()
GET           /savedsearches/:search_id/execute                                                  @controllers.SavedSearchesController.execute(search_id: String, streamId ?= "", width:Integer ?= -1)
PUT           /savedsearches/:search_id                                                          @controllers.api.SavedSearchesApiController.update(search_id: String)
POST          /savedsearches/create                                                              @controllers.api.SavedSearchesApiController.create()
DELETE        /savedsearches/:search_id/delete                                                   @controllers.SavedSearchesController.delete(search_id: String)

# Extractors
GET           /system/inputs/:node_id/:input_id/extractors                                       @controllers.ExtractorsController.manage(node_id: String, input_id: String)
GET           /system/inputs/:input_id/extractors                                                @controllers.ExtractorsController.manageGlobal(input_id: String)
GET           /system/inputs/:node_id/:input_id/extractors/new                                   @controllers.ExtractorsController.newExtractor(node_id: String, input_id: String, extractor_type ?= "", field ?= "", example_index ?= "", example_id ?= "")
POST          /system/inputs/:node_id/:input_id/extractors                                       @controllers.ExtractorsController.create(node_id: String, input_id: String)
POST          /system/inputs/:node_id/:input_id/extractors/:extractor_id/delete                  @controllers.ExtractorsController.delete(node_id: String, input_id: String, extractor_id: String)
GET           /system/inputs/:node_id/:input_id/extractors/:extractor_id/edit                    @controllers.ExtractorsController.editExtractor(node_id: String, input_id: String, extractor_id: String)
POST          /system/inputs/:node_id/:input_id/extractors/:extractor_id/update                  @controllers.ExtractorsController.update(node_id: String, input_id: String, extractor_id: String)
GET           /system/inputs/:node_id/:input_id/extractors/export                                @controllers.ExtractorsController.exportExtractors(node_id: String, input_id: String)
GET           /system/inputs/:node_id/:input_id/extractors/import                                @controllers.ExtractorsController.importExtractorsPage(node_id: String, input_id: String)
POST          /system/inputs/:node_id/:input_id/extractors/import                                @controllers.ExtractorsController.importExtractors(node_id: String, input_id: String)

# Users
GET           /system/users                                                                      @controllers.UsersController.index()
POST          /system/users                                                                      @controllers.UsersController.create()
POST          /system/users/delete/:username                                                     @controllers.UsersController.delete(username: String)
POST          /system/users/save/:username                                                       @controllers.UsersController.saveChanges(username: String)
GET           /system/users/new                                                                  @controllers.UsersController.newUserForm()
GET           /system/users/edit/:username                                                       @controllers.UsersController.editUserForm(username: String)
POST          /system/users/password/:username                                                   @controllers.UsersController.changePassword(username: String)
POST          /system/users/startpage/reset/:username                                            @controllers.StartpageController.reset(username: String)
POST          /system/users/resetpermissions/:username                                           @controllers.UsersController.resetPermissions(username: String)

# Sources
GET           /sources                                                                           @controllers.SourcesController.list()

# Startpages
GET           /startpage/set                                                                     @controllers.StartpageController.set(pageType ?= "", id ?= "")

# LDAP configuration
GET           /system/ldap                                                                       @controllers.LdapController.index()
POST          /system/ldap                                                                       @controllers.LdapController.saveLdapSettings()
POST          /a/system/ldap/testconnect                                                         @controllers.LdapController.apiTestLdapConnection()
POST          /a/system/ldap/testlogin                                                           @controllers.LdapController.apiTestLdapLogin()

# Systemjobs
POST          /systemjobs/trigger                                                                @controllers.SystemJobsController.trigger()

# Logging
GET           /system/logging                                                                    @controllers.LoggingController.index()
PUT           /system/logging/node/:node_id/subsystem/:subsystem/:level                          @controllers.LoggingController.setSubsystemLevel(node_id: String, subsystem: String, level: String)

# Dashboards
GET           /dashboards                                                                        @controllers.DashboardsController.index()
GET           /dashboards/new                                                                    @controllers.DashboardsController.newDashboard()
GET           /dashboards/:id                                                                    @controllers.DashboardsController.show(id: String)
POST          /dashboards/create                                                                 @controllers.DashboardsController.create()
GET           /dashboards/:id/delete                                                             @controllers.DashboardsController.delete(id: String)

# API: Search (i.e. facets)
GET           /a/search/fieldstats                                                               @controllers.api.SearchApiController.fieldStats(q ?= "", field ?= "", rangetype ?= "", relative:Integer ?= -1, from ?= "", to ?= "", keyword ?= "", stream_id ?= "")
GET           /a/search/fieldterms                                                               @controllers.api.SearchApiController.fieldTerms(q ?= "", field ?= "", rangetype ?= "", relative:Integer ?= -1, from ?= "", to ?= "", keyword ?= "", stream_id ?= "")
GET           /a/search/fieldhistogram                                                           @controllers.api.SearchApiController.fieldHistogram(q ?= "", field ?= "", rangetype ?= "", relative:Integer ?= -1, from ?= "", to ?= "", keyword ?= "", interval ?= "", valueType ?= "", streamId ?= "")
GET           /a/search/histogram                                                                @controllers.api.SearchApiController.histogram(q ?= "", rangetype ?= "", relative:Integer ?= -1, from ?= "", to ?= "", keyword ?= "", interval ?= "", streamId ?= "", maxDataPoints:Integer ?= -1)

# API: Message counts and histograms
GET           /a/messagecounts/total                                                             @controllers.MessageCountsController.total()

# API: Message analyzing
GET           /a/analyze/:index/:id/:field                                                       @controllers.MessagesController.analyze(index: String, id: String, field: String)

# Metrics via SockJS, set up new router
->            /a/metrics                                                                         controllers.api.MetricsController.metrics

# API: System
GET           /a/system/fields                                                                   @controllers.api.SystemApiController.fields()
GET           /a/system/jobs                                                                     @controllers.api.SystemApiController.jobs()
GET           /a/system/notifications                                                            @controllers.api.SystemApiController.notifications()
DELETE        /a/system/notifications/:notification_type                                         @controllers.api.SystemApiController.deleteNotification(notification_type: String)
GET           /a/system/throughput                                                               @controllers.api.SystemApiController.totalThroughput()
GET           /a/system/throughput/node/:node_id                                                 @controllers.api.SystemApiController.nodeThroughput(node_id: String)
GET           /a/system/throughput/radio/:radio_id                                               @controllers.api.SystemApiController.radioThroughput(radio_id: String)
GET           /a/system/throughput/stream/:stream_id                                             @controllers.api.SystemApiController.streamThroughput(stream_id: String)
PUT           /a/system/processing/pause                                                         @controllers.api.SystemApiController.pauseMessageProcessing()
PUT           /a/system/processing/resume                                                        @controllers.api.SystemApiController.resumeMessageProcessing()
GET           /a/system/node/:node_id/heap                                                       @controllers.api.SystemApiController.heap(node_id: String)
GET           /a/system/node/:node_id/journal                                                    @controllers.api.SystemApiController.journal(node_id: String)
GET           /a/system/radio/:radio_id/heap                                                     @controllers.api.SystemApiController.radioHeap(radio_id: String)
GET           /a/system/internallogs/:node_id                                                    @controllers.api.SystemApiController.internalLogsOfNode(node_id: String)
GET           /a/system/internallogs/:node_id/metrics                                            @controllers.api.SystemApiController.internalLogMetricsOfNode(node_id: String)
GET           /a/system/users                                                                    @controllers.api.UsersApiController.listUsers()
GET           /a/system/users/:username                                                          @controllers.api.UsersApiController.isUniqueUsername(username: String)
GET           /a/system/user/:username                                                           @controllers.api.UsersApiController.loadUser(username: String)
DELETE        /a/system/user/:username                                                           @controllers.api.UsersApiController.deleteUser(username: String)
PUT           /a/system/user/:username/preferences                                               @controllers.api.UsersApiController.saveUserPreferences(username: String)

# API: Nodes
GET           /a/system/nodes                                                                    @controllers.api.NodesApiController.nodes()

# API: Inputs
GET           /a/system/inputs                                                                   @controllers.api.InputsApiController.list()
GET           /a/system/inputs/global/:input_id/recent_message                                   @controllers.api.InputsApiController.globalRecentMessage(input_id: String)
GET           /a/system/inputs/global/:input_id/io                                               @controllers.api.InputsApiController.globaIO(input_id: String)
GET           /a/system/inputs/:node_id/:input_id/recent_message                                 @controllers.api.InputsApiController.recentMessage(node_id: String, input_id: String)
GET           /a/system/inputs/:node_id/:input_id/io                                             @controllers.api.InputsApiController.io(node_id: String, input_id: String)
GET           /a/system/inputs/:node_id/:input_id/connections                                    @controllers.api.InputsApiController.connections(node_id: String, input_id: String)

# API: Messages
GET           /a/messages/:index/:id                                                             @controllers.MessagesController.single(index: String, id: String)

# API: Tools
POST          /a/tools/regex_test                                                                @controllers.api.ToolsApiController.regexTest()
POST          /a/tools/substring_test                                                            @controllers.api.ToolsApiController.substringTest()
POST          /a/tools/split_and_index_test                                                      @controllers.api.ToolsApiController.splitAndIndexTest()
POST          /a/tools/grok_test                                                                 @controllers.api.ToolsApiController.grokTest()
GET           /a/tools/natural_date_test                                                         @controllers.api.ToolsApiController.naturalDateTest(string ?= "")

# API: Server Connection
GET           /a/connection/available                                                            @controllers.LonesomeInterfaceController.checkServerAvailability()

# API: Dashboards
GET           /a/dashboards                                                                      @controllers.api.DashboardsApiController.index()
POST          /a/dashboards                                                                      @controllers.api.DashboardsApiController.create()
GET           /a/dashboards/writable                                                             @controllers.api.DashboardsApiController.listWritable()
POST          /a/dashboards/:id/positions                                                        @controllers.api.DashboardsApiController.setWidgetPositions(id: String)
PUT           /a/dashboards/:dashboard_id                                                        @controllers.api.DashboardsApiController.update(dashboard_id: String)
GET           /a/dashboards/:dashboard_id/widgets/:widget_id                                     @controllers.api.DashboardsApiController.widget(dashboard_id: String, widget_id: String)
PUT           /a/dashboards/:dashboard_id/widgets/:widget_id                                     @controllers.api.DashboardsApiController.updateWidget(dashboard_id: String, widget_id: String)
GET           /a/dashboards/:dashboard_id/widgets/:widget_id/value                               @controllers.api.DashboardsApiController.widgetValue(dashboard_id: String, widget_id: String, resolution: Integer ?= -1)
GET           /a/dashboards/:dashboard_id/widgets/:widget_id/resolution/:resolution/value        @controllers.api.DashboardsApiController.widgetValue(dashboard_id: String, widget_id: String, resolution: Integer)
POST          /a/dashboards/:dashboard_id/widgets                                                @controllers.api.DashboardsApiController.addWidget(dashboard_id: String)
POST          /a/dashboards/:dashboard_id/widgets/:widget_id/delete                              @controllers.api.DashboardsApiController.removeWidget(dashboard_id: String, widget_id: String)
POST          /a/dashboards/:dashboard_id/widgets/:widget_id/description                         @controllers.api.DashboardsApiController.updateWidgetDescription(dashboard_id: String, widget_id: String)
POST          /a/dashboards/:dashboard_id/widgets/:widget_id/cachetime                           @controllers.api.DashboardsApiController.updateWidgetCacheTime(dashboard_id: String, widget_id: String)

# API: Streams
GET           /a/streams                                                                         @controllers.api.StreamsApiController.list()
POST          /a/streams                                                                         @controllers.api.StreamsApiController.create()
GET           /a/streams/:stream_id                                                              @controllers.api.StreamsApiController.get(stream_id: String)
PUT           /a/streams/:stream_id                                                              @controllers.api.StreamsApiController.update(stream_id: String)
DELETE        /a/streams/:stream_id                                                              @controllers.api.StreamsApiController.delete(stream_id: String)
POST          /a/streams/:stream_id/testMatch                                                    @controllers.api.StreamsApiController.testMatch(stream_id: String)
POST          /a/streams/:stream_id/pause                                                        @controllers.api.StreamsApiController.pause(stream_id: String)
POST          /a/streams/:stream_id/resume                                                       @controllers.api.StreamsApiController.resume(stream_id: String)
POST          /a/streams/:stream_id/cloneStream                                                  @controllers.api.StreamsApiController.cloneStream(stream_id: String)

# API: Stream Rules
GET           /a/streams/:stream_id/rules                                                        @controllers.api.StreamRulesApiController.list(stream_id: String)
POST          /a/streams/:stream_id/rules                                                        @controllers.api.StreamRulesApiController.create(stream_id: String)
GET           /a/streams/rules/types                                                             @controllers.api.StreamRulesApiController.types()
PUT           /a/streams/:stream_id/rules/:streamrule_id                                         @controllers.api.StreamRulesApiController.update(stream_id: String, streamrule_id: String)
DELETE        /a/streams/:stream_id/rules/:streamrule_id                                         @controllers.api.StreamRulesApiController.delete(stream_id: String, streamrule_id: String)

# API: Alerts
GET           /a/streams/alerts/allowed                                                          @controllers.api.AlertsApiController.allAllowedSince(since:Integer ?= 0)
GET           /a/streams/:stream_id/alerts                                                       @controllers.api.AlertsApiController.list(stream_id: String, skip: Integer ?= 0, limit: Integer ?= 0)

# API: Indices
GET           /a/system/indices/failures/dynatable                                               @controllers.api.IndicesApiController.failures(perPage:Integer ?= 50, offset:Integer ?= 0)
GET           /a/system/indices/index_info/:index_name/partial                                   @controllers.api.IndicesApiController.indexInfo(index_name: String)

# API: Extractors
POST          /a/system/inputs/:input_id/extractors/order                                        @controllers.api.ExtractorsApiController.order(input_id: String)

# API: Bundles
GET           /a/system/contentpacks                                                             @controllers.api.BundlesApiController.index()
POST          /a/system/contentpacks                                                             @controllers.api.BundlesApiController.create()
POST          /a/system/contentpacks/:pack_id/apply                                              @controllers.api.BundlesApiController.apply(pack_id: String)
POST          /a/system/contentpacks/:pack_id/delete                                             @controllers.api.BundlesApiController.delete(pack_id: String)

# API: Sources
GET           /a/sources                                                                         @controllers.api.SourcesApiController.list(range: Integer ?= 86400)

# Grok patterns
GET           /a/system/grokpatterns                                                             @controllers.api.GrokPatternsApiController.index()
POST          /a/system/grokpatterns/update                                                      @controllers.api.GrokPatternsApiController.update()
POST          /a/system/grokpatterns/create                                                      @controllers.api.GrokPatternsApiController.create()
DELETE        /a/system/grokpatterns/:pattern_id                                                 @controllers.api.GrokPatternsApiController.delete(pattern_id: String)

# API: Outputs
GET           /a/system/outputs                                                                  @controllers.api.OutputsApiController.index()
POST          /a/system/outputs                                                                  @controllers.api.OutputsApiController.create()
GET           /a/system/outputs/available/:output_type                                           @controllers.api.OutputsApiController.available(output_type: String)
GET           /a/system/outputs/availableTypes                                                   @controllers.api.OutputsApiController.availableTypes()
DELETE        /a/system/outputs/:output_id                                                       @controllers.api.OutputsApiController.delete(output_id: String)
PUT           /a/system/outputs/:output_id                                                       @controllers.api.OutputsApiController.update(output_id: String)
GET           /a/streams/:stream_id/outputs                                                      @controllers.api.StreamOutputsApiController.index(stream_id: String)
DELETE        /a/streams/:stream_id/outputs/:output_id                                           @controllers.api.StreamOutputsApiController.delete(stream_id: String, output_id: String)
PUT           /a/streams/:stream_id/outputs/:output_id                                           @controllers.api.StreamOutputsApiController.add(stream_id: String, output_id: String)

# API: AlarmCallbacks
GET           /a/streams/:stream_id/alarmcallbacks                                               @controllers.api.AlarmCallbacksApiController.list(stream_id: String)
GET           /a/streams/:stream_id/alarmcallbacks/available                                     @controllers.api.AlarmCallbacksApiController.available(stream_id: String)
POST          /a/streams/:stream_id/alarmcallbacks                                               @controllers.api.AlarmCallbacksApiController.create(stream_id: String)
DELETE        /a/streams/:stream_id/alarmcallbacks/:alarmcallback_id                             @controllers.api.AlarmCallbacksApiController.delete(stream_id: String, alarmcallback_id: String)
PUT           /a/streams/:stream_id/alarmcallbacks/:alarmcallback_id                             @controllers.api.AlarmCallbacksApiController.update(stream_id: String, alarmcallback_id: String)

# API: Alarm Callback History
GET         /a/streams/:stream_id/alerts/:alert_id/history                           @controllers.api.AlarmCallbackHistoryApiController.list(stream_id: String, alert_id: String)

# API: Collectors
GET           /a/system/collectors                                                               @controllers.api.CollectorsApiController.index()

GET           /robots.txt                                                                        controllers.Assets.at(path="/public", file="robots.txt")

# Map static resources from the /public folder to the /assets URL path
GET           /assets/*file                                                                      controllers.Assets.at(path="/public", file)

GET           /opensearch.xml                                                                    controllers.OpenSearchController.index()
